generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Length {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedTinyInt
  name               String               @unique @db.VarChar(20)
  description        String               @db.VarChar(100)
  order              Int                  @unique @db.UnsignedTinyInt //1 is the shortest, higher numbers are longer
  map                Map[]
  MapReview          MapReview[]
  Map_Archive        Map_Archive[]
  Map_Edit           Map_Edit[]
  Map_NewWithMod_New Map_NewWithMod_New[]
  Map_NewSolo        Map_NewSolo[]

  @@map("length")
}

model Difficulty {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedSmallInt
  name               String               @db.VarChar(50)
  description        String?              @db.VarChar(100)
  ParentDifficulty   Difficulty?          @relation("DifficultyToDifficulty", fields: [parentDifficultyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentDifficultyId Int?                 @default(0) @db.UnsignedSmallInt
  order              Int                  @db.UnsignedTinyInt //1 is the easiest, higher numbers are harder
  ChildDifficulty    Difficulty[]         @relation("DifficultyToDifficulty")
  Rating             Rating[]
  Tech               Tech[]
  Map                Map[]
  Map_Archive        Map_Archive[]
  Map_Edit           Map_Edit[]
  Map_NewWithMod_New Map_NewWithMod_New[]
  Map_NewSolo        Map_NewSolo[]

  @@unique([parentDifficultyId, name])
  @@unique([parentDifficultyId, order])
  @@index([parentDifficultyId])
  @@map("difficulty")
}

model Tech {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedSmallInt
  name                      String                      @unique @db.VarChar(50)
  description               String?                     @db.VarChar(150)
  Difficulty                Difficulty                  @relation(fields: [difficultyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  difficultyId              Int                         @db.UnsignedSmallInt //must be a parent difficulty
  TechVideo                 TechVideo[]
  MapToTechs                MapToTechs[]
  Map_ArchiveToTechs        Map_ArchiveToTechs[]
  Map_EditToTechs           Map_EditToTechs[]
  Map_NewWithMod_NewToTechs Map_NewWithMod_NewToTechs[]
  Map_NewSoloToTechs        Map_NewSoloToTechs[]

  @@index([difficultyId])
  @@map("tech")
}

model TechVideo {
  id     Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  Tech   Tech   @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  techId Int    @db.UnsignedSmallInt
  url    String @db.VarChar(100)

  @@index([techId])
  @@map("tech-video")
}

model Publisher {
  id           Int           @id @default(autoincrement()) @db.UnsignedSmallInt
  gamebananaId Int?          @unique @db.UnsignedMediumInt
  name         String        @unique @db.VarChar(100)
  User         User?         @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId       String?
  Mod          Mod[]
  Mod_Archive  Mod_Archive[]
  Mod_Edit     Mod_Edit[]
  Mod_New      Mod_New[]

  @@index([userId])
  @@map("publisher")
}

model Tag {
  id                Int                 @id @default(autoincrement()) @db.UnsignedTinyInt
  name              String              @unique @db.VarChar(50)
  ModToTags         ModToTags[]
  Mod_ArchiveToTags Mod_ArchiveToTags[]
  Mod_EditToTags    Mod_EditToTags[]
  Mod_NewToTags     Mod_NewToTags[]

  @@map("tag")
}

model Mod {
  id                    Int           @id @default(autoincrement()) @db.UnsignedSmallInt
  type                  ModType       @default(Normal)
  name                  String        @db.VarChar(200)
  Publisher             Publisher     @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisherId           Int           @db.UnsignedSmallInt
  contentWarning        Boolean       @default(false)
  notes                 String?       @db.VarChar(500)
  shortDescription      String        @db.VarChar(150)
  longDescription       String?       @db.VarChar(1500)
  gamebananaModId       Int           @unique @db.UnsignedMediumInt
  timeSubmitted         Int
  User_SubmittedBy      User?         @relation("Mod_SubmittedByToUser", fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedBy           String?
  timeApproved          Int
  User_ApprovedBy       User?         @relation("Mod_ApprovedByToUser", fields: [approvedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  approvedBy            String?
  timeCreatedGamebanana Int
  Map                   Map[]
  ModToTags             ModToTags[]
  Review                Review[]
  Mod_Archive           Mod_Archive[]
  Mod_Edit              Mod_Edit[]
  Map_NewSolo           Map_NewSolo[]

  @@index([approvedBy])
  @@index([contentWarning])
  @@index([publisherId])
  @@index([submittedBy])
  @@map("mod")
}

model ModToTags {
  Mod   Mod @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modId Int @db.UnsignedSmallInt
  Tag   Tag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId Int @db.UnsignedTinyInt

  @@id([modId, tagId])
  @@index([tagId])
  @@map("mod-to-tags")
}

model Map {
  id                    Int                    @id @default(autoincrement()) @db.UnsignedMediumInt
  Mod                   Mod                    @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modId                 Int                    @db.UnsignedSmallInt
  User_MapperUser       User?                  @relation("Map_MapperUserIdToUser", fields: [mapperUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  mapperUserId          String?
  mapperNameString      String                 @db.VarChar(50)
  name                  String                 @db.VarChar(200)
  Difficulty            Difficulty             @relation(fields: [canonicalDifficultyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  canonicalDifficultyId Int                    @db.UnsignedSmallInt //must be a parent difficulty
  Length                Length                 @relation(fields: [lengthId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  lengthId              Int                    @db.UnsignedTinyInt
  description           String?                @db.VarChar(500)
  notes                 String?                @db.VarChar(500)
  chapter               Int?                   @db.UnsignedTinyInt
  side                  MapSide?
  overallRank           Int?                   @db.UnsignedTinyInt
  mapRemovedFromModBool Boolean                @default(false)
  timeSubmitted         Int
  User_SubmittedBy      User?                  @relation("Map_SubmittedByToUser", fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedBy           String?
  timeApproved          Int
  User_ApprovedBy       User?                  @relation("Map_ApprovedByToUser", fields: [approvedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  approvedBy            String?
  MapToTechs            MapToTechs[]
  Rating                Rating[]
  MapReview             MapReview[]
  UsersToCompletedMaps  UsersToCompletedMaps[]
  Map_Archive           Map_Archive[]
  Map_Edit              Map_Edit[]

  @@unique([modId, chapter, side])
  @@unique([modId, name])
  @@index([approvedBy])
  @@index([canonicalDifficultyId])
  @@index([lengthId])
  @@index([mapperUserId])
  @@index([modId])
  @@index([submittedBy])
  @@map("map")
}

model MapToTechs {
  Map               Map     @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mapId             Int     @db.UnsignedMediumInt
  Tech              Tech    @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  techId            Int     @db.UnsignedSmallInt
  fullClearOnlyBool Boolean @default(false)

  @@id([mapId, techId])
  @@index([techId])
  @@map("map-to-techs")
}

model Mod_Archive {
  id                    Int                 @id @default(autoincrement()) @db.UnsignedSmallInt
  Mod                   Mod                 @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modId                 Int                 @db.UnsignedSmallInt
  type                  ModType             @default(Normal)
  name                  String              @db.VarChar(200)
  Publisher             Publisher           @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisherId           Int                 @db.UnsignedSmallInt
  contentWarning        Boolean             @default(false)
  notes                 String?             @db.VarChar(500)
  shortDescription      String              @db.VarChar(150)
  longDescription       String?             @db.VarChar(1500)
  gamebananaModId       Int                 @db.UnsignedMediumInt
  timeCreatedGamebanana Int
  timeSubmitted         Int
  User_SubmittedBy      User?               @relation("Mod_Archive_SubmittedByToUser", fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedBy           String?
  timeApproved          Int
  User_ApprovedBy       User?               @relation("Mod_Archive_ApprovedByToUser", fields: [approvedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  approvedBy            String?
  timeArchived          Int
  Mod_ArchiveToTags     Mod_ArchiveToTags[]

  @@index([approvedBy])
  @@index([contentWarning])
  @@index([publisherId])
  @@index([submittedBy])
  @@map("mod-archive")
}

model Mod_ArchiveToTags {
  Mod_Archive   Mod_Archive @relation(fields: [mod_ArchiveId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mod_ArchiveId Int         @db.UnsignedSmallInt
  Tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId         Int         @db.UnsignedTinyInt

  @@id([mod_ArchiveId, tagId])
  @@index([tagId])
  @@map("mod-archive-to-tags")
}

model Map_Archive {
  id                    Int                  @id @default(autoincrement()) @db.UnsignedMediumInt
  Map                   Map                  @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mapId                 Int                  @db.UnsignedMediumInt
  User_MapperUser       User?                @relation("Map_Archive_MapperUserIdToUser", fields: [mapperUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  mapperUserId          String?
  mapperNameString      String               @db.VarChar(50)
  name                  String               @db.VarChar(200)
  Difficulty            Difficulty           @relation(fields: [canonicalDifficultyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  canonicalDifficultyId Int                  @db.UnsignedSmallInt //must be a parent difficulty
  Length                Length               @relation(fields: [lengthId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  lengthId              Int                  @db.UnsignedTinyInt
  description           String?              @db.VarChar(500)
  notes                 String?              @db.VarChar(500)
  chapter               Int?                 @db.UnsignedTinyInt
  side                  MapSide?
  overallRank           Int?                 @db.UnsignedTinyInt
  mapRemovedFromModBool Boolean              @default(false)
  timeSubmitted         Int
  User_SubmittedBy      User?                @relation("Map_Archive_SubmittedByToUser", fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedBy           String?
  timeApproved          Int
  User_ApprovedBy       User?                @relation("Map_Archive_ApprovedByToUser", fields: [approvedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  approvedBy            String?
  timeArchived          Int
  Map_ArchiveToTechs    Map_ArchiveToTechs[]

  @@index([approvedBy])
  @@index([canonicalDifficultyId])
  @@index([lengthId])
  @@index([mapperUserId])
  @@index([mapId])
  @@index([submittedBy])
  @@map("map-archive")
}

model Map_ArchiveToTechs {
  Map_Archive       Map_Archive @relation(fields: [map_ArchiveId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  map_ArchiveId     Int         @db.UnsignedMediumInt
  Tech              Tech        @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  techId            Int         @db.UnsignedSmallInt
  fullClearOnlyBool Boolean     @default(false)

  @@id([map_ArchiveId, techId])
  @@index([techId])
  @@map("mod-archive-to-techs")
}

model Mod_Edit {
  id                    Int              @id @default(autoincrement()) @db.UnsignedSmallInt
  Mod                   Mod              @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modId                 Int              @db.UnsignedSmallInt
  type                  ModType          @default(Normal)
  name                  String           @db.VarChar(200)
  Publisher             Publisher        @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisherId           Int              @db.UnsignedSmallInt
  contentWarning        Boolean          @default(false)
  notes                 String?          @db.VarChar(500)
  shortDescription      String           @db.VarChar(150)
  longDescription       String?          @db.VarChar(1500)
  gamebananaModId       Int              @db.UnsignedMediumInt
  timeCreatedGamebanana Int
  timeSubmitted         Int
  User_SubmittedBy      User?            @relation(fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedBy           String?
  Mod_EditToTags        Mod_EditToTags[]
  Mod_NewToTags         Mod_NewToTags[]

  @@index([contentWarning])
  @@index([publisherId])
  @@index([submittedBy])
  @@map("mod-edit")
}

model Mod_EditToTags {
  Mod_Edit   Mod_Edit @relation(fields: [mod_EditId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mod_EditId Int      @db.UnsignedSmallInt
  Tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId      Int      @db.UnsignedTinyInt

  @@id([mod_EditId, tagId])
  @@index([tagId])
  @@map("mod-edit-to-tags")
}

model Map_Edit {
  id                    Int               @id @default(autoincrement()) @db.UnsignedMediumInt
  Map                   Map               @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mapId                 Int               @db.UnsignedMediumInt
  User_MapperUser       User?             @relation("Map_Edit_MapperUserIdToUser", fields: [mapperUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  mapperUserId          String?
  mapperNameString      String            @db.VarChar(50)
  name                  String            @db.VarChar(200)
  Difficulty            Difficulty        @relation(fields: [canonicalDifficultyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  canonicalDifficultyId Int               @db.UnsignedSmallInt //must be a parent difficulty
  Length                Length            @relation(fields: [lengthId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  lengthId              Int               @db.UnsignedTinyInt
  description           String?           @db.VarChar(500)
  notes                 String?           @db.VarChar(500)
  chapter               Int?              @db.UnsignedTinyInt
  side                  MapSide?
  overallRank           Int?              @db.UnsignedTinyInt
  mapRemovedFromModBool Boolean           @default(false)
  timeSubmitted         Int
  User_SubmittedBy      User?             @relation("Map_Edit_SubmittedByToUser", fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedBy           String?
  Map_EditToTechs       Map_EditToTechs[]

  @@index([canonicalDifficultyId])
  @@index([lengthId])
  @@index([mapperUserId])
  @@index([mapId])
  @@index([submittedBy])
  @@map("map-edit")
}

model Map_EditToTechs {
  Map_Edit          Map_Edit @relation(fields: [map_editId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  map_editId        Int      @db.UnsignedMediumInt
  Tech              Tech     @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  techId            Int      @db.UnsignedSmallInt
  fullClearOnlyBool Boolean  @default(false)

  @@id([map_editId, techId])
  @@index([techId])
  @@map("map-edit-to-techs")
}

model Mod_New {
  id                    Int                  @id @default(autoincrement()) @db.UnsignedSmallInt
  type                  ModType              @default(Normal)
  name                  String               @db.VarChar(200)
  Publisher             Publisher            @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisherId           Int                  @db.UnsignedSmallInt
  contentWarning        Boolean              @default(false)
  notes                 String?              @db.VarChar(500)
  shortDescription      String               @db.VarChar(150)
  longDescription       String?              @db.VarChar(1500)
  gamebananaModId       Int                  @unique @db.UnsignedMediumInt
  timeSubmitted         Int
  User_SubmittedBy      User?                @relation(fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedBy           String?
  timeCreatedGamebanana Int
  Map_NewWithMod_New    Map_NewWithMod_New[]

  @@index([contentWarning])
  @@index([publisherId])
  @@index([submittedBy])
  @@map("mod-new")
}

model Mod_NewToTags {
  Mod_New   Mod_Edit @relation(fields: [mod_NewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mod_NewId Int      @db.UnsignedSmallInt
  Tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     Int      @db.UnsignedTinyInt

  @@id([mod_NewId, tagId])
  @@index([tagId])
  @@map("mod-new-to-tags")
}

model Map_NewWithMod_New {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedMediumInt
  Mod_New                   Mod_New                     @relation(fields: [mod_NewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mod_NewId                 Int                         @db.UnsignedSmallInt
  User_MapperUser           User?                       @relation("Map_NewWithMod_New_MapperUserIdToUser", fields: [mapperUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  mapperUserId              String?
  mapperNameString          String                      @db.VarChar(50)
  name                      String                      @db.VarChar(200)
  Difficulty                Difficulty                  @relation(fields: [canonicalDifficultyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  canonicalDifficultyId     Int                         @db.UnsignedSmallInt //must be a parent difficulty
  Length                    Length                      @relation(fields: [lengthId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  lengthId                  Int                         @db.UnsignedTinyInt
  description               String?                     @db.VarChar(500)
  notes                     String?                     @db.VarChar(500)
  chapter                   Int?                        @db.UnsignedTinyInt
  side                      MapSide?
  overallRank               Int?                        @db.UnsignedTinyInt
  mapRemovedFromModBool     Boolean                     @default(false)
  timeSubmitted             Int
  User_SubmittedBy          User?                       @relation("Map_NewWithMod_New_SubmittedByToUser", fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedBy               String?
  Map_NewWithMod_NewToTechs Map_NewWithMod_NewToTechs[]

  @@unique([mod_NewId, chapter, side])
  @@unique([mod_NewId, name])
  @@index([canonicalDifficultyId])
  @@index([lengthId])
  @@index([mapperUserId])
  @@index([mod_NewId])
  @@index([submittedBy])
  @@map("map-new-with-mod-new")
}

model Map_NewWithMod_NewToTechs {
  Map_NewWithMod_New   Map_NewWithMod_New @relation(fields: [map_NewWithMod_NewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  map_NewWithMod_NewId Int                @db.UnsignedMediumInt
  Tech                 Tech               @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  techId               Int                @db.UnsignedSmallInt
  fullClearOnlyBool    Boolean            @default(false)

  @@id([map_NewWithMod_NewId, techId])
  @@index([techId])
  @@map("map-new-with-mod-new-to-techs")
}

model Map_NewSolo {
  id                    Int                  @id @default(autoincrement()) @db.UnsignedMediumInt
  Mod                   Mod                  @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modId                 Int                  @db.UnsignedSmallInt
  User_MapperUser       User?                @relation("Map_NewSolo_MapperUserIdToUser", fields: [mapperUserId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  mapperUserId          String?
  mapperNameString      String               @db.VarChar(50)
  name                  String               @db.VarChar(200)
  Difficulty            Difficulty           @relation(fields: [canonicalDifficultyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  canonicalDifficultyId Int                  @db.UnsignedSmallInt //must be a parent difficulty
  Length                Length               @relation(fields: [lengthId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  lengthId              Int                  @db.UnsignedTinyInt
  description           String?              @db.VarChar(500)
  notes                 String?              @db.VarChar(500)
  chapter               Int?                 @db.UnsignedTinyInt
  side                  MapSide?
  overallRank           Int?                 @db.UnsignedTinyInt
  mapRemovedFromModBool Boolean              @default(false)
  timeSubmitted         Int
  User_SubmittedBy      User?                @relation("Map_NewSolo_SubmittedByToUser", fields: [submittedBy], references: [id], onDelete: SetNull, onUpdate: Cascade)
  submittedBy           String?
  Map_NewSoloToTechs    Map_NewSoloToTechs[]

  @@unique([modId, chapter, side])
  @@unique([modId, name])
  @@index([canonicalDifficultyId])
  @@index([lengthId])
  @@index([mapperUserId])
  @@index([modId])
  @@index([submittedBy])
  @@map("map-new-solo")
}

model Map_NewSoloToTechs {
  Map_NewSolo       Map_NewSolo @relation(fields: [map_NewSoloId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  map_NewSoloId     Int         @db.UnsignedMediumInt
  Tech              Tech        @relation(fields: [techId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  techId            Int         @db.UnsignedSmallInt
  fullClearOnlyBool Boolean     @default(false)

  @@id([map_NewSoloId, techId])
  @@index([techId])
  @@map("map-new-solo-to-techs")
}

model Quality {
  id          Int      @id @default(autoincrement()) @db.UnsignedTinyInt
  name        String   @unique @db.VarChar(20)
  description String   @db.VarChar(100)
  order       Int      @unique @db.UnsignedTinyInt //1 is the worst, higher numbers are better
  Rating      Rating[]

  @@map("quality")
}

model Rating {
  id               Int         @id @default(autoincrement()) @db.UnsignedInt
  Map              Map         @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mapId            Int         @db.UnsignedMediumInt
  User_SubmittedBy User        @relation(fields: [submittedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  submittedBy      String
  timeSubmitted    Int
  Quality          Quality?    @relation(fields: [qualityId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  qualityId        Int?        @db.UnsignedTinyInt
  Difficulty       Difficulty? @relation(fields: [difficultyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  difficultyId     Int?        @db.UnsignedSmallInt //must be a child difficulty

  @@unique([mapId, submittedBy])
  @@index([difficultyId])
  @@index([mapId])
  @@index([qualityId])
  @@index([submittedBy])
  @@map("rating")
}

model ReviewCollection {
  id          Int      @id @default(autoincrement()) @db.UnsignedSmallInt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  name        String   @db.VarChar(100)
  description String   @db.VarChar(500)
  Review      Review[]

  @@unique([userId, name])
  @@index([userId])
  @@map("review-collection")
}

model Review {
  id                 Int              @id @default(autoincrement()) @db.UnsignedMediumInt
  Mod                Mod              @relation(fields: [modId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modId              Int              @db.UnsignedSmallInt
  ReviewCollection   ReviewCollection @relation(fields: [reviewCollectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewCollectionId Int              @db.UnsignedSmallInt
  timeSubmitted      Int
  likes              String?          @db.VarChar(1000)
  dislikes           String?          @db.VarChar(1000)
  otherComments      String?          @db.VarChar(1500)
  MapReview          MapReview[]

  @@unique([reviewCollectionId, modId])
  @@index([modId])
  @@index([reviewCollectionId])
  @@map("review")
}

model MapReview {
  id                Int     @id @default(autoincrement()) @db.UnsignedInt
  Review            Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId          Int     @db.UnsignedMediumInt
  Map               Map     @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mapId             Int     @db.UnsignedMediumInt
  Length            Length  @relation(fields: [lengthId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  lengthId          Int     @db.UnsignedTinyInt
  timeSubmitted     Int
  likes             String? @db.VarChar(500)
  dislikes          String? @db.VarChar(500)
  otherComments     String? @db.VarChar(500)
  displayRatingBool Boolean @default(false)

  @@unique([reviewId, mapId])
  @@index([lengthId])
  @@index([mapId])
  @@index([reviewId])
  @@map("map-review")
}

model UsersToCompletedMaps {
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  Map    Map    @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mapId  Int    @db.UnsignedMediumInt

  @@id([userId, mapId])
  @@index([mapId])
  @@map("users-to-completed-maps")
}

model UserClaim {
  id               Int    @id @default(autoincrement()) @db.UnsignedMediumInt
  User_claimedBy   User   @relation("UserClaim_ClaimedBy", fields: [claimedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  claimedBy        String
  User_claimedUser User   @relation("UserClaim_ClaimedUserId", fields: [claimedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  claimedUserId    String
  User_ApprovedBy  User?  @relation("UserClaim_ApprovedBy", fields: [approvedBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  approvedBy       String?

  @@unique([claimedBy, claimedUserId])
  @@index([claimedBy])
  @@map("user-claim")
}

// Next auth models
model User {
  id                                    String                 @id @default(cuid())
  name                                  String
  image                                 String?
  discordUsername                       String?                @db.VarChar(32)
  discordDiscriminator                  String?                @db.VarChar(4)
  displayDiscord                        Boolean?
  showCompletedMaps                     Boolean                @default(false)
  permissions                           String                 @default("")
  accountStatus                         User_AccountStatus     @default(Active)
  timeDeletedOrBanned                   Int?
  Publisher                             Publisher[]
  Rating                                Rating[]
  ReviewCollection                      ReviewCollection[]
  CompletedMaps                         UsersToCompletedMaps[]
  Account                               Account[]
  Session                               Session[]
  Mod_submittedByToUser                 Mod[]                  @relation("Mod_SubmittedByToUser")
  Mod_approvedByToUser                  Mod[]                  @relation("Mod_ApprovedByToUser")
  Map_mapperUserIdToUser                Map[]                  @relation("Map_MapperUserIdToUser")
  Map_submittedByToUser                 Map[]                  @relation("Map_SubmittedByToUser")
  Map_approvedByToUser                  Map[]                  @relation("Map_ApprovedByToUser")
  Mod_Archive_submittedByToUser         Mod_Archive[]          @relation("Mod_Archive_SubmittedByToUser")
  Mod_Archive_approvedByToUser          Mod_Archive[]          @relation("Mod_Archive_ApprovedByToUser")
  Map_Archive_mapperUserIdToUser        Map_Archive[]          @relation("Map_Archive_MapperUserIdToUser")
  Map_Archive_submittedByToUser         Map_Archive[]          @relation("Map_Archive_SubmittedByToUser")
  Map_Archive_approvedByToUser          Map_Archive[]          @relation("Map_Archive_ApprovedByToUser")
  Mod_Edit_submittedByToUser            Mod_Edit[]
  Map_Edit_mapperUserIdToUser           Map_Edit[]             @relation("Map_Edit_MapperUserIdToUser")
  Map_Edit_submittedByToUser            Map_Edit[]             @relation("Map_Edit_SubmittedByToUser")
  Mod_New_submittedByToUser             Mod_New[]
  Map_NewWithMod_New_mapperUserIdToUser Map_NewWithMod_New[]   @relation("Map_NewWithMod_New_MapperUserIdToUser")
  Map_NewWithMod_New_submittedByToUser  Map_NewWithMod_New[]   @relation("Map_NewWithMod_New_SubmittedByToUser")
  Map_NewSolo_mapperUserIdToUser        Map_NewSolo[]          @relation("Map_NewSolo_MapperUserIdToUser")
  Map_NewSolo_submittedByToUser         Map_NewSolo[]          @relation("Map_NewSolo_SubmittedByToUser")
  UserClaim_claimedByToUser             UserClaim[]            @relation("UserClaim_ClaimedBy")
  UserClaim_claimedUserIdToUser         UserClaim[]            @relation("UserClaim_ClaimedUserId")
  UserClaim_approvedByToUser            UserClaim[]            @relation("UserClaim_ApprovedBy")

  @@unique([discordUsername, discordDiscriminator])
  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String? @map("sessionState")

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  expires      DateTime

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification-token")
}

//End Next Auth models

enum ModType {
  Normal
  Collab
  Contest
  LobbyOther
}

enum User_AccountStatus {
  Active
  Deleted
  Banned
  Unlinked
}

enum MapSide {
  A
  B
  C
  D
  E
}
